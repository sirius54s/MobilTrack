name: Build & Release

on:
  push:
    branches: [main]
    paths:
      - 'package.json'
      - 'src/**'
      - 'src-electron/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Nueva versi√≥n para release'
        required: true
        type: string

jobs:
  # Job para detectar cambios y decidir si hacer build
  check-changes:
    name: Check Version Changes
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.build }}
      current_version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get current version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Check if should build
        id: check
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "build=true" >> $GITHUB_OUTPUT
            echo "Manual trigger - building"
          elif git diff HEAD~1 HEAD --name-only | grep -E "(package\.json|src/|src-electron/)"; then
            echo "build=true" >> $GITHUB_OUTPUT  
            echo "Relevant files changed - building"
          else
            echo "build=false" >> $GITHUB_OUTPUT
            echo "No relevant changes - skipping build"
          fi

  # Build multi-platform
  build:
    name: Build ${{ matrix.os }}
    needs: check-changes
    if: needs.check-changes.outputs.should_build == 'true'
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            platform: linux
          - os: windows-latest  
            platform: windows
          - os: macos-latest
            platform: macos
    
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Quasar CLI
        run: npm install -g @quasar/cli

      - name: Debug - Check Quasar version
        run: |
          quasar --version
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"

      - name: Build Quasar App
        run: npm run build

      - name: Build Electron App with Publishing
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "Building for ${{ matrix.platform }}"
          npm run build:electron -- --publish=always

      - name: Debug - List build outputs
        run: |
          echo "=== Checking build outputs ==="
          ls -la . || true
          ls -la dist/ || echo "No dist directory"
          ls -la dist/electron/ || echo "No dist/electron directory"  
          find . -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" | head -10 || echo "No executables found"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-${{ matrix.platform }}
          path: |
            dist/electron/Packaged/*
            dist/electron/UnPackaged/*
          if-no-files-found: warn

  # Release job usando semantic-release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, check-changes]
    if: needs.build.result == 'success'
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: List downloaded artifacts
        run: |
          echo "=== Downloaded artifacts ==="
          find artifacts/ -type f | head -20 || echo "No artifacts found"

      - name: Fetch Git tags
        run: git fetch --tags

      - name: Run Semantic Release
        run: npx semantic-release

      - name: Upload release assets
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.check-changes.outputs.current_version }}
          name: "MobilTrack v${{ needs.check-changes.outputs.current_version }}"
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/**/*.exe
            artifacts/**/*.dmg  
            artifacts/**/*.AppImage
            artifacts/**/*.deb
            artifacts/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  # Notificaci√≥n final
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [check-changes, build, release]
    if: always()
    steps:
      - name: Success Notification
        if: needs.release.result == 'success'
        run: |
          echo "üéâ Build and release successful!"
          echo "üì± MobilTrack v${{ needs.check-changes.outputs.current_version }} is ready"
          
      - name: Failure Notification  
        if: needs.build.result == 'failure' || needs.release.result == 'failure'
        run: |
          echo "‚ùå Build or release failed"
          echo "Check the logs above for details"
