name: Build & Release

on:
  push:
    branches: [main]
  workflow_dispatch:

# ⚡ PERMISOS CRÍTICOS para semantic-release
permissions:
  contents: write    # Para crear tags y commits
  issues: write      # Para crear releases
  pull-requests: write  # Para PRs automáticos

jobs:
  # Verificar si hay commits que requieren release
  check-release:
    name: Check if release needed
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}  # ⚡ Usar GH_TOKEN para push
          token: ${{ secrets.GH_TOKEN }}  # ⚡ Usar GH_TOKEN en lugar de GITHUB_TOKEN

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check if release needed
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}  # ⚡ Usar GH_TOKEN
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Usar semantic-release en modo dry-run para ver si hay release
          if npx semantic-release --dry-run | grep -q "The next release version is"; then
            echo "release=true" >> $GITHUB_OUTPUT
            echo "✅ Release needed"
          else
            echo "release=false" >> $GITHUB_OUTPUT
            echo "❌ No release needed"
          fi

  # Build multi-platform solo si hay release
  build:
    name: Build ${{ matrix.platform }}
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            platform: linux
          - os: windows-latest  
            platform: windows
          - os: macos-latest
            platform: macos
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Quasar CLI
        run: npm install -g @quasar/cli

      - name: Build Quasar App  
        run: npm run build

      - name: Build Electron App (no publish yet)
        run: npm run build:electron

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}
          path: |
            dist/electron/Packaged/*.exe
            dist/electron/Packaged/*.dmg
            dist/electron/Packaged/*.AppImage
            dist/electron/Packaged/*.deb
            dist/electron/Packaged/*.zip
          if-no-files-found: warn

  # Release con semantic-release (solo desde ubuntu)
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: [check-release, build]
    if: needs.check-release.outputs.should_release == 'true' && needs.build.result == 'success'
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Move artifacts to dist structure
        run: |
          # Recrear estructura de directorios para semantic-release
          mkdir -p dist/electron/Packaged
          find artifacts/ -name "*.exe" -exec cp {} dist/electron/Packaged/ \;
          find artifacts/ -name "*.dmg" -exec cp {} dist/electron/Packaged/ \;
          find artifacts/ -name "*.AppImage" -exec cp {} dist/electron/Packaged/ \;
          find artifacts/ -name "*.deb" -exec cp {} dist/electron/Packaged/ \;
          find artifacts/ -name "*.zip" -exec cp {} dist/electron/Packaged/ \;
          
          echo "=== Final artifacts ==="
          ls -la dist/electron/Packaged/ || echo "No packaged files"

      - name: Run Semantic Release
        run: npx semantic-release

  # Publicar binarios a GitHub releases usando electron-builder  
  publish:
    name: Publish to GitHub
    runs-on: ubuntu-latest
    needs: [release]
    if: needs.release.result == 'success'
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js  
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Quasar CLI
        run: npm install -g @quasar/cli

      - name: Build and publish Electron
        run: |
          npm run build
          npm run build:electron -- --publish=always
